##################################  keplerPlot.py  #############################################
# File:              keplerPlot.py 
# Author:            Vijay Koju (vk8736@truman.edu)
# Created:           3 July 2011
# Last modified:     29 July 2011
#
# Please feel free to contact me if you have any questions regarding this program.
#
################################################################################################
# Required modules for running this program.
#        numpy, matplotlib
# numpy can be downloaded from scipy.org
# matplotlib can be downloaded from matplotlib.sourceforge.net/index.html
################################################################################################
# Required files for running this program.
# 1) kepIDs_with_period.txt (This file contains all the informations such as keplerID, light
#    curve type, period, fill out factor, magnitude, etc. All these informations can be found
#    at the website astro4.ast.villanova.edu/aprsa/kepler. This txt file basically contains
#    all the informations found in the given website.)
# 2) effTemp.txt (This file contains keplerID and effective tempereture.)
# 3) kepler_EBdata_Prsa_filenames.txt (This file contains the full names for all the light
#    curves with a serial number assigned to each (eg. 1  kplr001026032-2009259160929_llc.txt).
# all these files must be kept in the same folder where the light curve files are stored.
################################################################################################
#     keplerPlot.py is a program for plotting the results light curve analysis done by using the
# kplrlca (kepler_04.py) program. This program takes the file (eg. 03221207.txt) generated by
# the kplrlca program as an input and then generates plots of various parameters as specified in
# the function argument.
#     It is intended to run from the python interactive shell or the ipython shell in the
# terminal. For detailed help, call display_help() function after running the program.
# >> run keplerPlot.py
# >> display_help()
#       You may use, adapt, and redistribute this software subject to the terms of the
# Creative Commons Attribution-ShareAlike 2.5 Generic License.
# --> See http://creativecommons.org/licenses/by-sa/2.5/ for details.
################################################################################################

import numpy
from pylab import *

print "         Call 'display_help()' function for detailed help."
print "         >> display_help()"

x = arange(1,3,.001)

class Kepler():
    def __init__(self,filename):
        self.file_name = filename
        
    # Return the Kepler ID for the system from the filename.
    # @param kepler_filename
    # @return int keplerID.
    def getKeplerID(self):
        kepler_ID = self.file_name[0:8]
        return kepler_ID
    
    def getInfo(self,i):
        kepler_ID = self.file_name[0:8]
        infoFile = open('kepIDs_with_period.txt','r')
        id_type1 = kepler_ID + '.00'
        id_type2 = kepler_ID + '.01'
        id_type3 = kepler_ID + '.02'
        for line in infoFile:
            line = line.split()
            if id_type1 in line[0]:
                return line[i]
            elif id_type2 in line[0]:
                return line[i]
            elif id_type3 in line[0]:
                return line[i]

    def getInfoS(self,i):
        kepler_ID = self.file_name[0:8]
        infoFile = open('kepIDs_with_period.txt','r')
        id_type1 = kepler_ID + '.00'
        id_type2 = kepler_ID + '.01'
        id_type3 = kepler_ID + '.02'
        for line in infoFile:
            line = line.split()
            if id_type1 in line[0]:
                return line[i]
            elif id_type2 in line[0]:
                return line[i]
            elif id_type3 in line[0]:
                return line[i]
            
    # Return the period of the system.
    # @param kepler_filename
    # @return int period
    def getPeriod(self):
        colnum = 3
        return self.getInfo(colnum)

    # Return BKJD0([B]arycentric [K]epler [J]ulian [D]ate) for the system at intial data acquisition.
    # @param kepler_filename
    # @return int BKJD0 value.
    def getBKJD0(self):
        colnum = 2
        return self.getInfo(colnum)
        

    # Return K-magnitude of the star.
    # @param kepler_filename
    # @return float Kmag.
    def getKmag(self):
        colnum = 4
        return self.getInfo(colnum)

    # Return type of the lightcurve.
    # @param kepler_filename
    # @return string type.
    def getLcType(self):
        colnum = 1
        return self.getInfoS(colnum)
            
    # Return type of the lightcurve.
    # @param kepler_filename
    # @return string type.
    def getTempRatio(self):
        colnum = 5
        return self.getInfoS(colnum)

    # Return type of the lightcurve.
    # @param kepler_filename
    # @return string type.
    def getSumOfFracRadii(self):
        colnum = 6
        return self.getInfoS(colnum)

    # Return type of the lightcurve.
    # @param kepler_filename
    # @return string type.
    def getMassRatio(self):
        colnum = 7
        return self.getInfoS(colnum)

    # Return type of the lightcurve.
    # @param kepler_filename
    # @return string type.
    def getSineEccentricity(self):
        colnum = 8
        return self.getInfoS(colnum)

    # Return type of the lightcurve.
    # @param kepler_filename
    # @return string type.
    def getCosEccentricity(self):
        colnum = 9
        return self.getInfoS(colnum)

    # Return type of the lightcurve.
    # @param kepler_filename
    # @return string type.
    def getSineOfInclination(self):
        colnum = 11
        return self.getInfoS(colnum)

    # Return fill out factor of the system.
    # @param kepler_filename
    # @return string FF.
    def getFillOutFactor(self):
        colnum = 10
        return self.getInfoS(colnum)

    def getEffectiveTemp(self):
        kepler_ID = self.file_name[0:8]
        infoFile1 = open('effTemp.txt','r')
        for line in infoFile1:
            line = line.split()
            if kepler_ID in line[0]:
                return line[1]
            


def lcNum(filename):
    flname = open('kepler_EBdata_Prsa_filenames.txt','r')
    for line in flname:
        line = line.split()
        if filename[0:8] in line[1]:
            return line[0]

############################################################################


def keplerPlot(filename,plotOption):
    kep = Kepler(filename)              #opens the kepler file of the given file number.
    kepid = kep.getKeplerID()
    period = kep.getPeriod()
    kmag = kep.getKmag()
    lcType = kep.getLcType()
    tempRatio = kep.getTempRatio()
    fracRadii = kep.getSumOfFracRadii()
    massRatio = kep.getMassRatio()
    eSinw = kep.getSineEccentricity()
    eCosw = kep.getCosEccentricity()
    sini = kep.getSineOfInclination()
    ffactor = kep.getFillOutFactor()
    sn = lcNum(filename)
    effT = kep.getEffectiveTemp()
    
    fname = open(filename,'r')
    cycle = []
    dmmax = []
    dmmaxerr = []
    dmmin = []
    dmminerr = []
    oer = []
    oererr = []
    lca = []
    lcaerr = []
    """
    max1 = []
    max2 = []
    min1 = []
    min2 = []
    negmax1 = []
    """
    for line in fname:
        line = line.split()
        cycle.append(eval(line[0]))
        dmmax.append(eval(line[1]))
        dmmaxerr.append(eval(line[2]))
        dmmin.append(eval(line[3]))
        dmminerr.append(eval(line[4]))
        oer.append(eval(line[5]))
        oererr.append(eval(line[6]))
        lca.append(eval(line[7]))
        lcaerr.append(eval(line[8]))
        """
        max1.append(eval(line[9]))
        max2.append(eval(line[10]))
        min1.append(eval(line[11]))
        min2.append(eval(line[12]))
        negmax1.append(eval('-'+line[9]))
        """

    clf()
    if plotOption == False:
        subplot(311)
        subplots_adjust(hspace=.3, wspace=.1)
        errorbar(cycle,dmmax,yerr=dmmaxerr,fmt='r.')
        xlim(0,cycle[-1]+2)
        xlabel('Cycle Number')
        ylabel('dmmax(mmag)')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT) +'K', fontsize =12)
        grid(True)

        subplot(312)
        subplots_adjust(hspace=.3, wspace=.1)
        errorbar(cycle,dmmin,yerr=dmminerr, fmt='b.')
        xlim(0,cycle[-1]+2)
        xlabel('Cycle Number')
        ylabel('dmmin(mmag)')
        grid(True)

        subplot(313)
        errorbar(dmmin,dmmax,xerr=dmminerr,yerr=dmmaxerr, fmt='g.')
        xlabel('dmmin(mmag)')
        ylabel('dmmax(mmag)')
        grid(True)
        #savefig('/Users/vijaykoju/Desktop/kepResults/'+'('+str(sn)+')'+str(kepid)+'.png', format = 'png')

    if plotOption == None:
        subplot(211)
        subplots_adjust(hspace=.3, wspace=.1)
        errorbar(cycle,dmmax,yerr=dmmaxerr,fmt='.',color='red')
        xlim(0,cycle[-1]+2)
        xlabel('Revolutions')
        ylabel('$\Delta \mathrm{m_{max}(mmag)}$')
        title( '  KeplerID : ' + str(kepid) + '              Period : ' + str(kep.getPeriod()) +'d'\
               , fontsize =12)
        #grid(True)

        subplot(212)
        subplots_adjust(hspace=.3, wspace=.1)
        errorbar(cycle,dmmin,yerr=dmminerr, fmt='x', color='blue')
        xlim(0,cycle[-1]+2)
        xlabel('Revolutions')
        ylabel('$\Delta \mathrm{m_{min}(mmag)}$')
        #grid(True)
        savefig('/Users/vijaykoju/Desktop/'+'('+str(sn)+')'+str(kepid)+'.png', format = 'png')
    
        
    if plotOption == 'dmmaxVsCycle':
        errorbar(cycle,dmmax,yerr=dmmaxerr,fmt='b.')
        xlim(0,cycle[-1]+2)
        xlabel('Cycle Number')
        ylabel('dmmax(mmag)')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)
        
    if plotOption == 'dmminVsCycle':
        errorbar(cycle,dmmin,yerr=dmminerr, fmt='y.')
        xlim(0,cycle[-1]+2)
        xlabel('Cycle Number')
        ylabel('dmmin(mmag)')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)
        
    if plotOption == 'oerVsCycle':
        errorbar(cycle,oer,yerr=oererr,fmt='r.')
        xlim(0,cycle[-1]+2)
        xlabel('Cycle Number')
        ylabel('OER')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)
        
    if plotOption == 'lcaVsCycle':
        errorbar(cycle,lca,yerr=lcaerr, fmt='g.')
        xlim(0,cycle[-1]+2)
        xlabel('Cycle Number')
        ylabel('LCA')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT), fontsize =12)
        grid(True)
        
    if plotOption == 'dmmaxVsdmmin':
        errorbar(dmmin,dmmax,xerr=dmminerr,yerr=dmmaxerr, fmt='g.')
        xlabel('dmmin(mmag)')
        ylabel('dmmax(mmag)')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)

    if plotOption == 'dmmaxVsoer':
        errorbar(oer,dmmax,xerr=oererr,yerr=dmmaxerr, fmt='g.')
        xlabel('oer')
        ylabel('dmmax(mmag)')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)
        
    if plotOption == 'dmmaxVslca':
        errorbar(lca,dmmax,xerr=lcaerr,yerr=dmmaxerr, fmt='g.')
        xlabel('lca')
        ylabel('dmmax(mmag)')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)
        
    if plotOption == 'dmmixVsoer':
        errorbar(oer,dmmix,xerr=oererr,yerr=dmmixerr, fmt='g.')
        xlabel('dmmin(mmag)')
        ylabel('oer')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)
        
    if plotOption == 'dmmixVslca':
        errorbar(lca,dmmax,xerr=lcaerr,yerr=dmmixerr, fmt='g.')
        xlabel('dmmin(mmag)')
        ylabel('lca')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)
        
    if plotOption == 'oerVslca':
        errorbar(lca,oer,xerr=lcaerr,yerr=oererr, fmt='g.')
        xlabel('lca')
        ylabel('oer')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)
"""
    if plotOption == 'min1Vsmin2':
        errorbar(min2,min1,xerr=0,yerr=0, fmt='g.')
        xlabel('min2(mag)')
        ylabel('min1(mag)')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)
        
    if plotOption == 'max1Vsmax2':
        errorbar(max2,negmax1,xerr=0,yerr=0, fmt='g.')
        xlabel('max2(mag)')
        ylabel('-max1(mag)')
        title( '    S.N.: ' + str(sn) + '  KeplerID : ' + str(kepid) + '  Period : ' + str(kep.getPeriod()) +'d'+\
                       '  LC-Type : ' + str(kep.getLcType()) + '   EffT : ' +str(effT)+'K', fontsize =12)
        grid(True)
"""
def display_help():
    print ""
    print "   ##################################  keplerPlot.py  #############################################"
    print "   # File:              keplerPlot.py"
    print "   # Author:            Vijay Koju (vk8736@truman.edu)"
    print "   # Created:           3 July 2011"
    print "   # Last modified:     29 July 2011"
    print "   #"
    print "   # Please feel free to contact me if you have any question regarding this program."
    print "   #"
    print "   ################################################################################################"
    print "   # Required modules for running this program."
    print "   # numpy, matplotlib"
    print "   ################################################################################################"
    print "   # Required files for running this program."
    print "   # 1) kepIDs_with_period.txt (This file contains all the informations such as keplerID, light"
    print "   #    curve type, period, fill out factor, magnitude, etc. All these informations can be found"
    print "   #    at the website astro4.ast.villanova.edu/aprsa/kepler. This txt file basically contains"
    print "   #    all the informations found in the given website.)"
    print "   # 2) effTemp.txt (This file contains keplerID and effective tempereture.)"
    print "   # 3) kepler_EBdata_Prsa_filenames.txt (This file contains the full names for all the light"
    print "   #    curves with a serial number assigned to each (eg. 1  kplr001026032-2009259160929_llc.txt)."
    print "   # all these files must be kept in the same folder where the light curve files are stored."
    print "   ################################################################################################"
    print "   #     keplerPlot.py is a program for plotting the results light curve analysis done by using the"
    print "   # kplrlca (kepler_04.py) program. This program takes the file (eg. 03221207.txt) generated by"
    print "   # the kplrlca program as an input and then generates plots of various parameters as specified in"
    print "   # the function argument."
    print "   #     It is intended to run from the python interactive shell or the ipython shell in the"
    print "   # terminal."
    print "   # >> display_help()    # displays this page."
    print "   #       You may use, adapt, and redistribute this software subject to the terms of the"
    print "   # Creative Commons Attribution-ShareAlike 2.5 Generic License."
    print "   # --> See http://creativecommons.org/licenses/by-sa/2.5/ for details."
    print "   ################################################################################################"
    print "USAGE: >>run keplerPlot.py"
    print "       >>keplerPlot(filename,plotOption)"
    print "plotOption availabe:"
    print "   False  -- eg. keplerPlot('03221207.txt',False) This displays three plots (dmmax Vs. Cycle,"
    print "             dmmin Vs. Cycle, and dmmax Vs. dmmin) in a single figure."
    print "   'dmmaxVsCycle'   -- eg. keplerPlot('03221207.txt','dmmaxVsCycle')"
    print "   'dmminVsCyle'"
    print "   'dmmaxVsdmmin'"
    print "   'oerVsCycle'"
    print "   'lcaVsCycle'"
    print "   'dmmaxVsoer'"
    print "   'dmmaxVslca'"
    print "   'dmminVsoer'"
    print "   'dmminVslca'"
    print "   'oerVslca'"
    print "   'max1Vsmax2'"
    print "   'min1Vsmin2'"
    print " NOTE: For detached (D) systems, the only plotOption available is 'dmmaxVsCycle'"


###################################################################################################################
###################################################################################################################
# if you need to plot the graphs for many files and you want to automate the program, so that you don't have to
# run the program again and again after each file, then uncomment the following commands and run the program.
#
# NOTE: filename.txt file is required, which should have the names of all the files, including .txt.
#       eg. 03221207.txt
###################################################################################################################

##if __name__ == '__main__':
##    f = open('filename.txt','r')
##    nmlist = []
##    for line in f:
##        line = line.split()
##        nmlist.append(line[0])
##    for item in nmlist:
##        keplerPlot(str(item),False)

########################################################################################################
